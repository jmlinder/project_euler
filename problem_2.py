# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.


def fib(n):
    '''
    Returns a fibonacci number given the term n.
    '''
    if n <= 1:
        return n
    else:
        return fib(n-1) + fib(n-2)


# Testing the function with the given example
for i in range(10):
    print(fib(i+2))


# Testing a bool that compares the value of a fibonacci number against a fixed value
print(fib(10) < 100)


# This function works up until a certain limit and then
# fib(1000)  # RecursionError


# Using a generator, we run into the same RecursionError issue.
def fib_gen_list(n):
    '''
    Returns a list of fibonacci numbers.
    '''
    for x in range(n):
        if x <= 1:
            yield x
        else:
            yield fib(x-1) + fib(x-2)


# This will generate a list, but at the cost of time
# for x in fib_gen_list(1000):
#     print(x)

#
# list(fib_gen_list(100))

# This method is more efficient, as we are only looking at the last two terms to generate the next term.
def new_fib(n):
    '''
    Generates a fibonacci number iteratively without recursion.
    '''
    a = 1
    b = 1
    for i in range(n):
        yield a
        a, b = b, a+b


for i in new_fib(10):
    print(i)

# This for loop executes in ~0.055 seconds
# for num in new_fib(1000):
#     print(num)


# Using this new function, we can finally solve the problem:
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.

sum = 0
for index, num in enumerate(new_fib(100)):

    # Filters out the 0th term, odd values, and values over 4mil
    if index == 0 or num % 2 != 0 or num > 4000000:
        continue
    else:
        sum = sum + num
        # print(f'===term no.{index}=== \nvalue: {num} \ntotal sum: {sum}')

print(sum)  # 4613732
